name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  # Job for linting, testing, and building Android app
  android:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js (Android)
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Cache Node modules (Android)
        uses: actions/cache@v3
        with:
          path: ~/.cache/yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Yarn globally (Android)
        run: npm install -g yarn

      - name: Uninstall legacy expo-cli and install new Expo CLI (Android)
        run: |
          npm uninstall -g expo-cli
          npm install -g expo@latest

      - name: Install Android SDK and dependencies (Android)
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-17-jdk
          sudo apt-get install -y android-sdk
          sudo apt-get install -y gradle
          sudo apt-get install -y adb
          sudo apt-get install -y qemu-kvm
          wget https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip -O commandlinetools.zip
          unzip commandlinetools.zip -d $ANDROID_HOME/cmdline-tools
          mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-30" "system-images;android-30;default;x86_64"
          yarn install

      - name: Set up Android emulator
        run: |
          echo "Creating Android Virtual Device (AVD)..."
          echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd -n test -k "system-images;android-30;default;x86_64" --device "pixel"
          echo "Starting emulator..."
          nohup $ANDROID_HOME/emulator/emulator -avd test -no-audio -no-window -gpu swiftshader_indirect &

      - name: Wait for emulator to start
        run: |
          adb wait-for-device
          adb shell input keyevent 82

      - name: Verify Android SDK installation
        run: |
          echo "Listing Android SDK directory contents:"
          ls -la /usr/lib/android-sdk
          echo "Listing platform-tools directory contents:"
          ls -la /usr/lib/android-sdk/platform-tools

      - name: Set up React Native environment variables (Android)
        run: |
          echo "export ANDROID_HOME=/usr/lib/android-sdk" >> $GITHUB_ENV
          echo "export PATH=$PATH:/usr/lib/android-sdk/cmdline-tools/latest/bin:/usr/lib/android-sdk/platform-tools:/usr/bin" >> $GITHUB_ENV

      - name: Print environment variables for debugging
        run: |
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "PATH: $PATH"

      - name: Verify adb installation
        run: |
          echo "Checking adb version using /usr/bin/adb:"
          /usr/bin/adb version || echo "adb not found at /usr/bin"

      - name: Run Android lint
        run: yarn run lint

      - name: Run Android tests
        run: yarn test

      - name: Build Android app with Expo
        env:
          ANDROID_HOME: /usr/lib/android-sdk
          PATH: ${{ env.PATH }}:/usr/lib/android-sdk/tools:/usr/lib/android-sdk/platform-tools:/usr/bin
        run: expo run:android

  # Job for linting, testing, and building iOS app
  ios:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js (iOS)
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Cache Node modules (iOS)
        uses: actions/cache@v3
        with:
          path: ~/.cache/yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Yarn globally (iOS)
        run: npm install -g yarn

      - name: Uninstall legacy expo-cli and install new Expo CLI (iOS)
        run: |
          npm uninstall -g expo-cli
          npm install -g expo@latest

      - name: Install dependencies (iOS)
        run: |
          brew install cocoapods
          yarn install 
          cd ios && pod install && cd ..

      - name: Run iOS lint
        run: yarn run lint

      - name: Run iOS tests
        run: yarn test

      - name: Build iOS app with Expo
        run: expo run:ios
